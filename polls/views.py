from django.shortcuts import render, get_object_or_404

# Create your views here.
from django.http import HttpResponse, HttpResponseRedirect
from django.utils import timezone
from django.views.generic import ListView, DetailView

from .models import Question, Choice
from django.urls import reverse
from django.db.models import F

# change def to class if you want to use ListView or DetailView
class IndexView(ListView):
    """
    However, for ListView, the automatically generated context variable is question_list. To override this we provide
    the context_object_name attribute, specifying that we want to use latest_question_list instead. As an alternative
    approach, you could change your templates to match the new default context variables – but it’s a lot easier to
    just tell Django to use the variable you want.
    :param ListView:
    :return:
    """
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        #return Question.objects.order_by('-pub_date')[:5]
        """
            Return the last five published questions (not including those set to be
            published in the future).
            """
        return Question.objects.filter(
            pub_date__lte=timezone.now()
        ).order_by('-pub_date')[:5]


'''
By default, the DetailView generic view uses a template called <app name>/<model name>_detail.html. In our case, 
it would use the template "polls/question_detail.html". The template_name attribute is used to tell Django to use a 
specific template name instead of the autogenerated default template name. We also specify the template_name for the 
results list view – this ensures that the results view and the detail view have a different appearance when rendered, 
even though they’re both a DetailView behind the scenes.
'''


class DetailView(DetailView):
    """
    For DetailView the question variable is provided automatically – since we’re using a Django model (Question),
    Django is able to determine an appropriate name for the context variable.
    :param DetailView:
    :return:
    """
    model = Question
    template_name = 'polls/detail.html'

    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())


class ResultsView(DetailView):
    model = Question
    template_name = 'polls/results.html'


def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except(KeyError, Choice.DoesNotExist):
        return render(request, 'polls/detail.html', {'question': question, 'error_message': 'you didn\'t a selection'})
    else:
        print(selected_choice.votes)
        selected_choice.votes = F('votes') + 1
        print(selected_choice.votes)  # F(votes) + Value(1)
        # selected_choice.votes += 1 this will get into race condition
        selected_choice.save()
        selected_choice.refresh_from_db()  # To access the new value saved this way, the object must be reloaded
        print(selected_choice.votes)
    return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))
